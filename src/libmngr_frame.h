/*
 *  Librarian for KiCad, a free EDA CAD application.
 *  This file contains the code for the main frame, which is almost all of the
 *  user-interface code.
 *
 *  Copyright (C) 2013-2014 CompuPhase
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not
 *  use this file except in compliance with the License. You may obtain a copy
 *  of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *  License for the specific language governing permissions and limitations
 *  under the License.
 *
 *  $Id: libmngr_frame.h 5113 2014-08-13 07:34:05Z thiadmer $
 */
#ifndef __libmngr_frame__
#define __libmngr_frame__

/**
@file
Subclass of libmngr_frame_base, which is generated by wxFormBuilder.
*/

#include "libmngr_gui_base.h"
#include "libraryfunctions.h"
#include "cxffont.h"
#include <wx/timer.h>

/** Implementing libmngr_frame_base */
class libmngrFrame : public AppFrame
{
public:
		/** Constructor */
		libmngrFrame(wxWindow* parent);
	//// end generated class members

protected:
	void OnCloseApp(wxCloseEvent& event);
	void OnNewLibrary(wxCommandEvent& event);
	void OnRenameLibrary(wxCommandEvent& event);
	void OnNewFootprint(wxCommandEvent& event);
	void OnNewSymbol(wxCommandEvent& event);
	void OnFootprintReport(wxCommandEvent& event);
	void OnSymbolReport(wxCommandEvent& event);
	void OnQuit(wxCommandEvent& event);
	void OnFootprintMode(wxCommandEvent& event);
	void OnSymbolMode(wxCommandEvent& event);
	void OnSearchPaths(wxCommandEvent& event);
	void OnRemoteLink(wxCommandEvent& event);
	void OnReportSettings(wxCommandEvent& event);
	void OnUIOptions(wxCommandEvent& event);
	void OnTemplateOptions(wxCommandEvent& event);
	void OnCompareMode(wxCommandEvent& event);
	void OnDetailsPanel(wxCommandEvent& event);
	void OnFilterToggle(wxCommandEvent& event);
	void OnHelp(wxCommandEvent& event);
	void OnAbout(wxCommandEvent& event);
	void OnMovePart(wxCommandEvent& event);
	void OnCopyPart(wxCommandEvent& event);
	void OnDeletePart(wxCommandEvent& event);
	void OnRenamePart(wxCommandEvent& event);
	void OnDuplicatePart(wxCommandEvent& event);
	void OnLeftLibSelect(wxCommandEvent& event);
	void OnRightLibSelect(wxCommandEvent& event);
	void OnLeftModSelect(wxListEvent& event);
	void OnRightModSelect(wxListEvent& event);
	void OnZoomIn(wxCommandEvent& event);
	void OnZoomOut(wxCommandEvent& event);
	void OnShowMeasurements(wxCommandEvent& event);
	void OnShowDetails(wxCommandEvent& event);
	void OnShowLabels(wxCommandEvent& event);
	void OnShowLeftFootprint(wxCommandEvent& event);
	void OnShowRightFootprint(wxCommandEvent& event);
	void OnShowLeftDetails(wxCommandEvent& event);
	void OnShowRightDetails(wxCommandEvent& event);
	void OnDetailsPanelUnsplit(wxSplitterEvent& event);
	void OnViewStartDrag(wxMouseEvent& event);
	void OnViewDrag(wxMouseEvent& event);
	void OnViewCentre(wxMouseEvent& event);
	void OnPaintViewport(wxPaintEvent& event);
	void OnSizeViewport(wxSizeEvent& event);
	void OnStatusBarDblClk(wxMouseEvent& event);

	void OnTextFieldChange(wxCommandEvent& event);
	void OnChoiceFieldChange(wxCommandEvent& event);
	void OnEnterTextInfo(wxCommandEvent& event);
	void OnKillFocusTextInfo(wxFocusEvent& event);
	void ChangeTextInfo(wxControl* ctrl);

	bool RearrangePinNames(int direction);
	void OnPinNameChanged(wxGridEvent& event);
	void OnPinNameRearrange(wxKeyEvent& event);
	void OnPinRightClick(wxGridEvent& event);
	void OnSwapPins(wxCommandEvent& event);
	void OnPastePinList(wxCommandEvent& event);
	void OnSetPinType(wxCommandEvent& event);

	void OnEnterPadCount(wxCommandEvent& event);
	void OnKillFocusPadCount(wxFocusEvent& event);
	void ChangePadCount(wxControl* ctrl);
	void OnEnterPadInfo(wxCommandEvent& event);
	void OnKillFocusPadInfo(wxFocusEvent& event);
	void ChangePadInfo(wxControl* ctrl);
	void OnEnterPitchInfo(wxCommandEvent& event);
	void OnKillFocusPitchInfo(wxFocusEvent& event);
	void ChangePitch(wxControl* ctrl);
	void OnEnterSpanInfo(wxCommandEvent& event);
	void OnKillFocusSpanInfo(wxFocusEvent& event);
	void ChangeSpan(wxControl* ctrl);
	void OnEnterBodyInfo(wxCommandEvent& event);
	void OnKillFocusBodyInfo(wxFocusEvent& event);
	void ChangeBodyInfo(wxControl* ctrl);
	void OnEnterLabelField(wxCommandEvent& event);
	void OnKillFocusLabelField(wxFocusEvent& event);
	void OnLabelShowHide(wxCommandEvent& event);
	void ChangeLabelInfo(wxControl* ctrl);
	void OnSavePart(wxCommandEvent& event);
	void OnRevertPart(wxCommandEvent& event);

private:
	bool GetSelectedLibrary(wxString* library, int* side);
	bool GetReportNameList(wxString* reportfile, wxString* library, wxArrayString* namelist);

	void DrawSymbols(wxGraphicsContext *gc, int midx, int midy, const int transp[]);
	void DrawFootprints(wxGraphicsContext *gc, int midx, int midy, const int transp[]);
	void DrawDimension(wxGraphicsContext *gc, int midx, int midy, int orientation, int stack,
					   double value, const CoordPair pins[2], const CoordSize& bbox);
	void UpdateBoundingBox(CoordSize* bbox, double x, double y);
	void UpdateBoundingBox(CoordSize* bbox, double x, double y, double width, double height) {
		UpdateBoundingBox(bbox, x, y);
		UpdateBoundingBox(bbox, x + width, y + height);
	}

	wxString ExportSymbolBitmap(const wxString& modname);
	wxString ExportFootprintBitmap(const wxString& modname);

	bool CheckTemplateVar(const wxString& varname);
	bool SetVarDefaults(RPNexpression *rpn, const wxString& templatename,
						const wxString& name, const wxString& description,
						const wxString& prefix=wxEmptyString, bool silent=false);
	bool SetVarsFromFields(RPNexpression *rpn, bool SymbolMode);
	bool RebuildTemplate();

	bool ValidateFilename(wxString* name);

	void DrawStrokeText(wxGraphicsContext *gc, float x, float y, const wxString& text);

	void ToggleMode(bool symbolmode);
	void ToggleDetailsPanel(bool onoff);
	void EnableButtons(int side);
	wxString GetSelection(wxListCtrl* list, wxChoice* choice=0, wxString* library=0, wxString* author=0);
	bool RemoveSelection(wxListCtrl* list, int* index);

	long GetListPosition(const wxString &name, const wxListCtrl* list);
	void CollectLibraries(const wxString &path, wxArrayString* list);
	void CollectAllLibraries(bool eraselists=true);

	wxString GetPinSectionName(int side, int index);
	void WarnNoRepository(wxChoice* choice);
	void HandleLibrarySelect(wxChoice* choice, wxListCtrl* list, int side);
	void CollectSymbols(const wxString &path, wxListCtrl* list, const wxString& filter);
	void CollectFootprints(const wxString &path, wxListCtrl* list, const wxString& filter);
	void LoadPart(int index, wxListCtrl* list, wxChoice* choice, int fp);
	void UpdateDetails(int fp);

	bool SavePart(int index, wxListCtrl* list);
	bool CheckSavePart();

	#define IDM_TIMER 900
	wxTimer* m_Timer;
	void OnTimer(wxTimerEvent& event);

	wxTextCtrl* m_editFilter;
	bool FilterChanged;
	void OnFilterChange(wxCommandEvent& event);
	void OnFilterEnter(wxCommandEvent& event);

private:
	wxArrayString PartData[2];	/* max. 2 footprints or symbols may be loaded at any time */
	FootprintInfo Footprint[2];	/* dimensions, pad information and others (footprints) */
	BodyInfo BodySize[2];		/* body size (footprints & symbols) */
	LabelInfo LabelData[2];		/* reference and value labels (footprints & symbols) */
	PinInfo* PinData[2];		/* pin names and directions (symbols) */
	PinSection CustomPinSections[2][2];
	int PinDataCount[2];		/* number of entries in PinData (symbols) */
	bool FromRepository[2];		/* is the footprint/symbol from the repository? */
	int SelectedPartLeft;		/* current index in the symbol/module lists, -1 if there is no selection */
	int SelectedPartRight;
	bool FieldEdited;			/* was the field edited/changed? */
	bool PartEdited;			/* was the active footprint changed? */
	bool PinNamesEdited;		/* were any pin names edited? */

	double Scale;				/* scale used in the viewport */
	bool SymbolMode;			/* show schematic symbols instead of footprints */
	bool CompareMode;
	bool ShowLabels;
	bool ShowMeasurements;
	bool DrawCentreCross;
	long FontSizeLegend;
	long DimensionOffset;
	bool ShowPinNumbers;
	bool ShowFullPaths;
	bool CopyVRML;
	bool DontRebuildTemplate;
	bool ConfirmOverwrite;
	bool ConfirmDelete;

	long OffsetX, OffsetY;		/* offset from centre (when dragging) */
	long DragOrgX, DragOrgY;

	CXFFont VFont;				/* a vector/plotter font */
};

#endif // __libmngr_frame__
